
/*****************************************************************************
--  Note: This generated code is for demonstration purposes only and may
--        not be deployable.
*****************************************************************************/

CREATE OR REPLACE PACKAGE ""MAP_STAGE_PROVCOMMPROD_PKG"" AS
OWB$MAP_OBJECT_ID VARCHAR2(32) := '';
sql_stmt  VARCHAR2(32767);
get_abort BOOLEAN := FALSE;
get_abort_procedure BOOLEAN := FALSE;
get_trigger_success BOOLEAN := TRUE;
get_errors NUMBER(22) := 0;
get_status NUMBER(22) := 0;
get_error_ratio NUMBER(22) := 0;
get_global_names              VARCHAR2(10) := 'FALSE';
-- Status variable for Batch cursors
"STAGE_PROVCOMMPROD_STAGE_2_St" BOOLEAN := FALSE; 

"CONSTANT_0_0_CHANNEL" NUMBER(5) := NULL;"CONSTANT_0_UPDATE_FLAG" VARCHAR2(1) := 'Y';

-- Function Main 
-- Entry point in package ""MAP_STAGE_PROVCOMMPROD_PKG""
FUNCTION Main RETURN NUMBER;  

END ""MAP_STAGE_PROVCOMMPROD_PKG"";

/

CREATE OR REPLACE PACKAGE BODY ""MAP_STAGE_PROVCOMMPROD_PKG"" AS




---------------------------------------------------------------------------
-- Function "STAGE_PROVCOMMPROD_STAGE_2_Bat"
--   performs batch extraction
--   Returns TRUE on success
--   Returns FALSE on failure
---------------------------------------------------------------------------
FUNCTION "STAGE_PROVCOMMPROD_STAGE_2_Bat" 
 RETURN BOOLEAN IS

BEGIN
  EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

  BEGIN
    MERGE
/*+ APPEND PARALLEL("STAGE_PROVCOMMPROD_STAGE_2") */
INTO
  "STAGE"."STAGE_PROVCOMMPROD_STAGE"
USING
  (SELECT
  "SET_OPERATION_0"."PROVCOMMPROD_CODE$1" "PROVCOMMPROD_CODE",
  "SET_OPERATION_0"."PROVCOMMPROD_DESCR$1" "PROVCOMMPROD_DESCR",
  "SET_OPERATION_0"."COMMPRODGROUP_CODE$1" "COMMPRODGROUP_CODE",
  "SET_OPERATION_0"."COMMPRODGROUP_DESCR$1" "COMMPRODGROUP_DESCR",
  "MAP_STAGE_PROVCOMMPROD_PKG"."GET_CONSTANT_0_UPDATE_FLAG" "UPDATE_FLAG",
  "SET_OPERATION_0"."CHANNEL$1" "CHANNEL",
  "SET_OPERATION_0"."ORD$1" "ORD"
FROM
  (SELECT
  "PROVCOMMPROD_CODE" "PROVCOMMPROD_CODE$1",
  "PROVCOMMPROD_DESCR" "PROVCOMMPROD_DESCR$1",
  "COMMPRODGROUP_CODE" "COMMPRODGROUP_CODE$1",
  "COMMPRODGROUP_DESCR" "COMMPRODGROUP_DESCR$1",
  "CHANNEL" "CHANNEL$1",
  "ORD" "ORD$1"
FROM
  (SELECT
  "SET_OPERATION"."PROVCOMMPROD_CODE$2" "PROVCOMMPROD_CODE",
  "SET_OPERATION"."PROVCOMMPROD_DESCR$2" "PROVCOMMPROD_DESCR",
  "SET_OPERATION"."COMMPRODGROUP_CODE$2" "COMMPRODGROUP_CODE",
  "SET_OPERATION"."COMMPRODGROUP_DESCR$2" "COMMPRODGROUP_DESCR",
  "SET_OPERATION"."PROVCOMMPROD_CHANNEL" "CHANNEL",
  "SET_OPERATION"."PROVCOMMPROD_ORDER" "ORD"
FROM
  (SELECT
  "PROVCOMMPROD_CODE" "PROVCOMMPROD_CODE$2",
  "PROVCOMMPROD_DESCR" "PROVCOMMPROD_DESCR$2",
  "COMMPRODGROUP_CODE" "COMMPRODGROUP_CODE$2",
  "COMMPRODGROUP_DESCR" "COMMPRODGROUP_DESCR$2",
  "PROVCOMMPROD_CHANNEL" "PROVCOMMPROD_CHANNEL",
  "PROVCOMMPROD_ORDER" "PROVCOMMPROD_ORDER"
FROM
  (SELECT
  "ODS_PROVCOMMPROD"."PROVCOMMPROD_CODE" "PROVCOMMPROD_CODE",
  "ODS_PROVCOMMPROD"."PROVCOMMPROD_DESCR" "PROVCOMMPROD_DESCR",
  "ODS_PROVCOMMPRODGROUP"."PROVCOMMPRODGROUP_CODE" "COMMPRODGROUP_CODE",
  "ODS_PROVCOMMPRODGROUP"."PROVCOMMPRODGROUP_DESCR" "COMMPRODGROUP_DESCR",
  "ODS_PROVCOMMPROD"."PROVCOMMPROD_CHANNEL" "PROVCOMMPROD_CHANNEL",
  "ODS_PROVCOMMPROD"."PROVCOMMPROD_ORDER" "PROVCOMMPROD_ORDER"
FROM
  "ODS"."ODS_PROVCOMMPROD" "ODS_PROVCOMMPROD",
"ODS"."ODS_PROVCOMMPRODGROUP" "ODS_PROVCOMMPRODGROUP"
  WHERE 
  ( "ODS_PROVCOMMPROD"."PROVCOMMPROD_GROUP" = "ODS_PROVCOMMPRODGROUP"."PROVCOMMPRODGROUP_SK" )
MINUS
SELECT
  "STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_CODE" "PROVCOMMPROD_CODE",
  "STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_DESCR" "PROVCOMMPROD_DESCR",
  "STAGE_PROVCOMMPROD_STAGE"."COMMPRODGROUP_CODE" "COMMPRODGROUP_CODE",
  "STAGE_PROVCOMMPROD_STAGE"."COMMPRODGROUP_DESCR" "COMMPRODGROUP_DESCR",
  "STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_CHANNEL" "PROVCOMMPROD_CHANNEL",
  "STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_ORDER" "PROVCOMMPROD_ORDER"
FROM
  "STAGE"."STAGE_PROVCOMMPROD_STAGE" "STAGE_PROVCOMMPROD_STAGE") ) "SET_OPERATION"
UNION
SELECT
  "SET_OPERATION_1"."PROVCOMMPROD_CODE$3" "PROVCOMMPROD_CODE",
  "SET_OPERATION_1"."PROVCOMMPROD_DESCR$3" "PROVCOMMPROD_DESCR",
  "SET_OPERATION_1"."COMMPRODGROUP_CODE$3" "COMMPRODGROUP_CODE",
  "SET_OPERATION_1"."PROVCOMMPRODGROUP_DESCR_1" "COMMPRODGROUP_DESCR",
  "MAP_STAGE_PROVCOMMPROD_PKG"."GET_CONSTANT_0_0_CHANNEL" "CHANNEL",
  "MAP_STAGE_PROVCOMMPROD_PKG"."GET_CONSTANT_0_0_CHANNEL" "ORD"
FROM
  (SELECT
  "PROVCOMMPROD_CODE" "PROVCOMMPROD_CODE$3",
  "PROVCOMMPROD_DESCR" "PROVCOMMPROD_DESCR$3",
  "COMMPRODGROUP_CODE" "COMMPRODGROUP_CODE$3",
  "PROVCOMMPRODGROUP_DESCR_1" "PROVCOMMPRODGROUP_DESCR_1"
FROM
  (SELECT
  "ODS_PROVCOMMPRODGROUP"."PROVCOMMPRODGROUP_CODE" "PROVCOMMPROD_CODE",
  "ODS_PROVCOMMPRODGROUP"."PROVCOMMPRODGROUP_DESCR" "PROVCOMMPROD_DESCR",
  "ODS_PROVCOMMPRODGROUP"."PROVCOMMPRODGROUP_CODE" "COMMPRODGROUP_CODE",
  "ODS_PROVCOMMPRODGROUP"."PROVCOMMPRODGROUP_DESCR" "PROVCOMMPRODGROUP_DESCR_1"
FROM
  "ODS"."ODS_PROVCOMMPRODGROUP" "ODS_PROVCOMMPRODGROUP"
MINUS
SELECT
  "STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_CODE" "PROVCOMMPROD_CODE",
  "STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_DESCR" "PROVCOMMPROD_DESCR",
  "STAGE_PROVCOMMPROD_STAGE"."COMMPRODGROUP_CODE" "COMMPRODGROUP_CODE",
  "STAGE_PROVCOMMPROD_STAGE"."COMMPRODGROUP_DESCR" "PROVCOMMPRODGROUP_DESCR_1"
FROM
  "STAGE"."STAGE_PROVCOMMPROD_STAGE" "STAGE_PROVCOMMPROD_STAGE") ) "SET_OPERATION_1") ) "SET_OPERATION_0"
  )
    MERGE_SUBQUERY
ON (
  "STAGE"."STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_CODE" = "MERGE_SUBQUERY"."PROVCOMMPROD_CODE"
   )
  
  WHEN MATCHED THEN
    UPDATE
    SET
                  "PROVCOMMPROD_DESCR" = "MERGE_SUBQUERY"."PROVCOMMPROD_DESCR",
  "COMMPRODGROUP_CODE" = "MERGE_SUBQUERY"."COMMPRODGROUP_CODE",
  "COMMPRODGROUP_DESCR" = "MERGE_SUBQUERY"."COMMPRODGROUP_DESCR",
  "PROVCOMMPROD_UPDFLAG" = "MERGE_SUBQUERY"."UPDATE_FLAG",
  "PROVCOMMPROD_CHANNEL" = "MERGE_SUBQUERY"."CHANNEL",
  "PROVCOMMPROD_ORDER" = "MERGE_SUBQUERY"."ORD"
       
  WHEN NOT MATCHED THEN
    INSERT
      ("STAGE"."STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_CODE",
      "STAGE"."STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_DESCR",
      "STAGE"."STAGE_PROVCOMMPROD_STAGE"."COMMPRODGROUP_CODE",
      "STAGE"."STAGE_PROVCOMMPROD_STAGE"."COMMPRODGROUP_DESCR",
      "STAGE"."STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_UPDFLAG",
      "STAGE"."STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_CHANNEL",
      "STAGE"."STAGE_PROVCOMMPROD_STAGE"."PROVCOMMPROD_ORDER")
    VALUES
      ("MERGE_SUBQUERY"."PROVCOMMPROD_CODE",
      "MERGE_SUBQUERY"."PROVCOMMPROD_DESCR",
      "MERGE_SUBQUERY"."COMMPRODGROUP_CODE",
      "MERGE_SUBQUERY"."COMMPRODGROUP_DESCR",
      "MERGE_SUBQUERY"."UPDATE_FLAG",
      "MERGE_SUBQUERY"."CHANNEL",
      "MERGE_SUBQUERY"."ORD")
  ;
    COMMIT;
  EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    COMMIT;
    RETURN FALSE;
  END;
  COMMIT;
  RETURN TRUE;
END "STAGE_PROVCOMMPROD_STAGE_2_Bat";

FUNCTION Main RETURN NUMBER IS
get_batch_status           BOOLEAN := TRUE;
BEGIN
  




  
PROCEDURE EXEC_AUTONOMOUS_SQL(CMD IN VARCHAR2) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE (CMD);
  COMMIT;
END;
  -- Initialize all batch status variables
	"STAGE_PROVCOMMPROD_STAGE_2_St" := FALSE;



			
"STAGE_PROVCOMMPROD_STAGE_2_St" := "STAGE_PROVCOMMPROD_STAGE_2_Bat"; 


RETURN get_status;
END Main;
END ""MAP_STAGE_PROVCOMMPROD_PKG"";

/
