
/*****************************************************************************
--  Note: This generated code is for demonstration purposes only and may
--        not be deployable.
*****************************************************************************/

CREATE OR REPLACE PACKAGE ""MAP_STAGE_SPQUAL_PKG"" AS
OWB$MAP_OBJECT_ID VARCHAR2(32) := '';
sql_stmt  VARCHAR2(32767);
get_abort BOOLEAN := FALSE;
get_abort_procedure BOOLEAN := FALSE;
get_trigger_success BOOLEAN := TRUE;
get_errors NUMBER(22) := 0;
get_status NUMBER(22) := 0;
get_error_ratio NUMBER(22) := 0;
get_global_names              VARCHAR2(10) := 'FALSE';
-- Status variable for Batch cursors
"STAGE_SPQUAL_STAGE_St" BOOLEAN := FALSE; 

"CONSTANT_0_UPDATE_FLAG" VARCHAR2(1) := 'Y';

-- Function Main 
-- Entry point in package ""MAP_STAGE_SPQUAL_PKG""
FUNCTION Main RETURN NUMBER;  

END ""MAP_STAGE_SPQUAL_PKG"";

/

CREATE OR REPLACE PACKAGE BODY ""MAP_STAGE_SPQUAL_PKG"" AS




---------------------------------------------------------------------------
-- Function "STAGE_SPQUAL_STAGE_Bat"
--   performs batch extraction
--   Returns TRUE on success
--   Returns FALSE on failure
---------------------------------------------------------------------------
FUNCTION "STAGE_SPQUAL_STAGE_Bat" 
 RETURN BOOLEAN IS

BEGIN
  EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

  BEGIN
    MERGE
INTO
  "STAGE"."STAGE_SPQUAL_STAGE"
USING
  (SELECT
  "SET_OPERATION_0"."SPQUAL_CODE$1" "SPQUAL_CODE",
  "SET_OPERATION_0"."SPQUAL_DESCR$1" "SPQUAL_DESCR",
  "SET_OPERATION_0"."LINETYPE_CODE$1" "LINETYPE_CODE",
  "SET_OPERATION_0"."LINETYPE_DESCR$1" "LINETYPE_DESCR",
  "MAP_STAGE_SPQUAL_PKG"."GET_CONSTANT_0_UPDATE_FLAG" "UPDATE_FLAG"
FROM
  (SELECT
  "SPQUAL_CODE" "SPQUAL_CODE$1",
  "SPQUAL_DESCR" "SPQUAL_DESCR$1",
  "LINETYPE_CODE" "LINETYPE_CODE$1",
  "LINETYPE_DESCR" "LINETYPE_DESCR$1"
FROM
  (SELECT
  "SET_OPERATION"."SPQUAL_CODE$2" "SPQUAL_CODE",
  "SET_OPERATION"."SPQUAL_DESCR$2" "SPQUAL_DESCR",
  "SET_OPERATION"."LINETYPE_CODE$2" "LINETYPE_CODE",
  "SET_OPERATION"."LINETYPE_DESCR$2" "LINETYPE_DESCR"
FROM
  (SELECT
  "SPQUAL_CODE" "SPQUAL_CODE$2",
  "SPQUAL_DESCR" "SPQUAL_DESCR$2",
  "LINETYPE_CODE" "LINETYPE_CODE$2",
  "LINETYPE_DESCR" "LINETYPE_DESCR$2"
FROM
  (SELECT
  "ODS_SPQUAL"."SPQUAL_CODE" "SPQUAL_CODE",
  "ODS_SPQUAL"."SPQUAL_DESCR" "SPQUAL_DESCR",
  "ODS_LINETYPE"."LINETYPE_CODE" "LINETYPE_CODE",
  "ODS_LINETYPE"."LINETYPE_DESCR" "LINETYPE_DESCR"
FROM
  "ODS"."ODS_SPQUAL" "ODS_SPQUAL",
"ODS"."ODS_LINETYPE" "ODS_LINETYPE"
  WHERE 
  ( "ODS_SPQUAL"."SPQUAL_LINETYPE" = "ODS_LINETYPE"."LINETYPE_SK" )
MINUS
SELECT
  "STAGE_SPQUAL_STAGE"."SPQUAL_CODE" "SPQUAL_CODE",
  "STAGE_SPQUAL_STAGE"."SPQUAL_DESCR" "SPQUAL_DESCR",
  "STAGE_SPQUAL_STAGE"."LINETYPE_CODE" "LINETYPE_CODE",
  "STAGE_SPQUAL_STAGE"."LINETYPE_DESCR" "LINETYPE_DESCR"
FROM
  "STAGE"."STAGE_SPQUAL_STAGE" "STAGE_SPQUAL_STAGE") ) "SET_OPERATION"
UNION
SELECT
  "SET_OPERATION_1"."SPQUAL_CODE$3" "SPQUAL_CODE",
  "SET_OPERATION_1"."SPQUAL_DESCR$3" "SPQUAL_DESCR",
  "SET_OPERATION_1"."LINETYPE_CODE$3" "LINETYPE_CODE",
  "SET_OPERATION_1"."LINETYPE_DESCR$3" "LINETYPE_DESCR"
FROM
  (SELECT
  "SPQUAL_CODE" "SPQUAL_CODE$3",
  "SPQUAL_DESCR" "SPQUAL_DESCR$3",
  "LINETYPE_CODE" "LINETYPE_CODE$3",
  "LINETYPE_DESCR" "LINETYPE_DESCR$3"
FROM
  (SELECT
  "ODS_LINETYPE"."LINETYPE_CODE" "SPQUAL_CODE",
  "ODS_LINETYPE"."LINETYPE_DESCR" "SPQUAL_DESCR",
  "ODS_LINETYPE"."LINETYPE_CODE" "LINETYPE_CODE",
  "ODS_LINETYPE"."LINETYPE_DESCR" "LINETYPE_DESCR"
FROM
  "ODS"."ODS_LINETYPE" "ODS_LINETYPE"
MINUS
SELECT
  "STAGE_SPQUAL_STAGE"."SPQUAL_CODE" "SPQUAL_CODE",
  "STAGE_SPQUAL_STAGE"."SPQUAL_DESCR" "SPQUAL_DESCR",
  "STAGE_SPQUAL_STAGE"."LINETYPE_CODE" "LINETYPE_CODE",
  "STAGE_SPQUAL_STAGE"."LINETYPE_DESCR" "LINETYPE_DESCR"
FROM
  "STAGE"."STAGE_SPQUAL_STAGE" "STAGE_SPQUAL_STAGE") ) "SET_OPERATION_1") ) "SET_OPERATION_0"
  )
    MERGE_SUBQUERY
ON (
  "STAGE"."STAGE_SPQUAL_STAGE"."SPQUAL_CODE" = "MERGE_SUBQUERY"."SPQUAL_CODE"
   )
  
  WHEN MATCHED THEN
    UPDATE
    SET
                  "SPQUAL_DESCR" = "MERGE_SUBQUERY"."SPQUAL_DESCR",
  "LINETYPE_CODE" = "MERGE_SUBQUERY"."LINETYPE_CODE",
  "LINETYPE_DESCR" = "MERGE_SUBQUERY"."LINETYPE_DESCR",
  "SPQUAL_UPDFLAG" = "MERGE_SUBQUERY"."UPDATE_FLAG"
       
  WHEN NOT MATCHED THEN
    INSERT
      ("STAGE"."STAGE_SPQUAL_STAGE"."SPQUAL_CODE",
      "STAGE"."STAGE_SPQUAL_STAGE"."SPQUAL_DESCR",
      "STAGE"."STAGE_SPQUAL_STAGE"."LINETYPE_CODE",
      "STAGE"."STAGE_SPQUAL_STAGE"."LINETYPE_DESCR",
      "STAGE"."STAGE_SPQUAL_STAGE"."SPQUAL_UPDFLAG")
    VALUES
      ("MERGE_SUBQUERY"."SPQUAL_CODE",
      "MERGE_SUBQUERY"."SPQUAL_DESCR",
      "MERGE_SUBQUERY"."LINETYPE_CODE",
      "MERGE_SUBQUERY"."LINETYPE_DESCR",
      "MERGE_SUBQUERY"."UPDATE_FLAG")
  ;
    COMMIT;
  EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    COMMIT;
    RETURN FALSE;
  END;
  COMMIT;
  RETURN TRUE;
END "STAGE_SPQUAL_STAGE_Bat";

FUNCTION Main RETURN NUMBER IS
get_batch_status           BOOLEAN := TRUE;
BEGIN
  




  
PROCEDURE EXEC_AUTONOMOUS_SQL(CMD IN VARCHAR2) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE (CMD);
  COMMIT;
END;
  -- Initialize all batch status variables
	"STAGE_SPQUAL_STAGE_St" := FALSE;



			
"STAGE_SPQUAL_STAGE_St" := "STAGE_SPQUAL_STAGE_Bat"; 


RETURN get_status;
END Main;
END ""MAP_STAGE_SPQUAL_PKG"";

/
