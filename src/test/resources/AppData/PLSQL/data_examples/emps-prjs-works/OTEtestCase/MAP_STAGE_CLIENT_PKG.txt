
/*****************************************************************************
--  Note: This generated code is for demonstration purposes only and may
--        not be deployable.
*****************************************************************************/

CREATE OR REPLACE PACKAGE ""MAP_STAGE_CLIENT_PKG"" AS
OWB$MAP_OBJECT_ID VARCHAR2(32) := '';
sql_stmt  VARCHAR2(32767);
get_abort BOOLEAN := FALSE;
get_abort_procedure BOOLEAN := FALSE;
get_trigger_success BOOLEAN := TRUE;
get_errors NUMBER(22) := 0;
get_status NUMBER(22) := 0;
get_error_ratio NUMBER(22) := 0;
get_global_names              VARCHAR2(10) := 'FALSE';
-- Status variable for Batch cursors
"STAGE_CLIENT_STAGE_1_St" BOOLEAN := FALSE; 

"CONSTANT_0_UPDATE_FLAG" VARCHAR2(1) := 'Y';

-- Function Main 
-- Entry point in package ""MAP_STAGE_CLIENT_PKG""
FUNCTION Main RETURN NUMBER;  

END ""MAP_STAGE_CLIENT_PKG"";

/

CREATE OR REPLACE PACKAGE BODY ""MAP_STAGE_CLIENT_PKG"" AS




---------------------------------------------------------------------------
-- Function "STAGE_CLIENT_STAGE_1_Bat"
--   performs batch extraction
--   Returns TRUE on success
--   Returns FALSE on failure
---------------------------------------------------------------------------
FUNCTION "STAGE_CLIENT_STAGE_1_Bat" 
 RETURN BOOLEAN IS

BEGIN
  EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

  BEGIN
    MERGE
INTO
  "STAGE"."STAGE_CLIENT_STAGE"
USING
  (SELECT
  "SET_OPERATION_0"."CLIENT_CODE$1" "CLIENT_CODE",
  "SET_OPERATION_0"."CLIENT_DESCR$1" "CLIENT_DESCR",
  "SET_OPERATION_0"."CLIENTTYPE_CODE_1$1" "CLIENTTYPE_CODE_1",
  "SET_OPERATION_0"."CLIENTTYPE_DESCR_1$1" "CLIENTTYPE_DESCR_1",
  "MAP_STAGE_CLIENT_PKG"."GET_CONSTANT_0_UPDATE_FLAG" "UPDATE_FLAG"
FROM
  (SELECT
  "CLIENT_CODE" "CLIENT_CODE$1",
  "CLIENT_DESCR" "CLIENT_DESCR$1",
  "CLIENTTYPE_CODE_1" "CLIENTTYPE_CODE_1$1",
  "CLIENTTYPE_DESCR_1" "CLIENTTYPE_DESCR_1$1"
FROM
  (SELECT
  "SET_OPERATION"."CLIENT_CODE$2" "CLIENT_CODE",
  "SET_OPERATION"."CLIENT_DESCR$2" "CLIENT_DESCR",
  "SET_OPERATION"."CLIENTTYPE_CODE" "CLIENTTYPE_CODE_1",
  "SET_OPERATION"."CLIENTTYPE_DESCR" "CLIENTTYPE_DESCR_1"
FROM
  (SELECT
  "CLIENT_CODE" "CLIENT_CODE$2",
  "CLIENT_DESCR" "CLIENT_DESCR$2",
  "CLIENTTYPE_CODE" "CLIENTTYPE_CODE",
  "CLIENTTYPE_DESCR" "CLIENTTYPE_DESCR"
FROM
  (SELECT
  "ODS_CLIENT"."CLIENT_CODE" "CLIENT_CODE",
  "ODS_CLIENT"."CLIENT_DESCR" "CLIENT_DESCR",
  "ODS_CLIENTTYPE"."CLIENTTYPE_CODE" "CLIENTTYPE_CODE",
  "ODS_CLIENTTYPE"."CLIENTTYPE_DESCR" "CLIENTTYPE_DESCR"
FROM
  "ODS"."ODS_CLIENT" "ODS_CLIENT",
"ODS"."ODS_CLIENTTYPE" "ODS_CLIENTTYPE"
  WHERE 
  ( "ODS_CLIENT"."CLIENT_TYPE" = "ODS_CLIENTTYPE"."CLIENTTYPE_SK" )
MINUS
SELECT
  "STAGE_CLIENT_STAGE"."CLIENT_CODE" "CLIENT_CODE",
  "STAGE_CLIENT_STAGE"."CLIENT_DESCR" "CLIENT_DESCR",
  "STAGE_CLIENT_STAGE"."CLIENTTYPE_CODE" "CLIENTTYPE_CODE",
  "STAGE_CLIENT_STAGE"."CLIENTTYPE_DESCR" "CLIENTTYPE_DESCR"
FROM
  "STAGE"."STAGE_CLIENT_STAGE" "STAGE_CLIENT_STAGE") ) "SET_OPERATION"
UNION
SELECT
  "SET_OPERATION_1"."CLIENT_CODE$3" "CLIENT_CODE",
  "SET_OPERATION_1"."CLIENT_DESCR$3" "CLIENT_DESCR",
  "SET_OPERATION_1"."CLIENTTYPE_CODE_1$2" "CLIENTTYPE_CODE_1",
  "SET_OPERATION_1"."CLIENTTYPE_DESCR_1$2" "CLIENTTYPE_DESCR_1"
FROM
  (SELECT
  "CLIENT_CODE" "CLIENT_CODE$3",
  "CLIENT_DESCR" "CLIENT_DESCR$3",
  "CLIENTTYPE_CODE_1" "CLIENTTYPE_CODE_1$2",
  "CLIENTTYPE_DESCR_1" "CLIENTTYPE_DESCR_1$2"
FROM
  (SELECT
  "ODS_CLIENTTYPE"."CLIENTTYPE_CODE" "CLIENT_CODE",
  "ODS_CLIENTTYPE"."CLIENTTYPE_DESCR" "CLIENT_DESCR",
  "ODS_CLIENTTYPE"."CLIENTTYPE_CODE" "CLIENTTYPE_CODE_1",
  "ODS_CLIENTTYPE"."CLIENTTYPE_DESCR" "CLIENTTYPE_DESCR_1"
FROM
  "ODS"."ODS_CLIENTTYPE" "ODS_CLIENTTYPE"
MINUS
SELECT
  "STAGE_CLIENT_STAGE"."CLIENT_CODE" "CLIENT_CODE",
  "STAGE_CLIENT_STAGE"."CLIENT_DESCR" "CLIENT_DESCR",
  "STAGE_CLIENT_STAGE"."CLIENTTYPE_CODE" "CLIENTTYPE_CODE_1",
  "STAGE_CLIENT_STAGE"."CLIENTTYPE_DESCR" "CLIENTTYPE_DESCR_1"
FROM
  "STAGE"."STAGE_CLIENT_STAGE" "STAGE_CLIENT_STAGE") ) "SET_OPERATION_1") ) "SET_OPERATION_0"
  )
    MERGE_SUBQUERY
ON (
  "STAGE"."STAGE_CLIENT_STAGE"."CLIENT_CODE" = "MERGE_SUBQUERY"."CLIENT_CODE"
   )
  
  WHEN MATCHED THEN
    UPDATE
    SET
                  "CLIENT_DESCR" = "MERGE_SUBQUERY"."CLIENT_DESCR",
  "CLIENTTYPE_CODE" = "MERGE_SUBQUERY"."CLIENTTYPE_CODE_1",
  "CLIENTTYPE_DESCR" = "MERGE_SUBQUERY"."CLIENTTYPE_DESCR_1",
  "CLIENT_UPDFLAG" = "MERGE_SUBQUERY"."UPDATE_FLAG"
       
  WHEN NOT MATCHED THEN
    INSERT
      ("STAGE"."STAGE_CLIENT_STAGE"."CLIENT_CODE",
      "STAGE"."STAGE_CLIENT_STAGE"."CLIENT_DESCR",
      "STAGE"."STAGE_CLIENT_STAGE"."CLIENTTYPE_CODE",
      "STAGE"."STAGE_CLIENT_STAGE"."CLIENTTYPE_DESCR",
      "STAGE"."STAGE_CLIENT_STAGE"."CLIENT_UPDFLAG")
    VALUES
      ("MERGE_SUBQUERY"."CLIENT_CODE",
      "MERGE_SUBQUERY"."CLIENT_DESCR",
      "MERGE_SUBQUERY"."CLIENTTYPE_CODE_1",
      "MERGE_SUBQUERY"."CLIENTTYPE_DESCR_1",
      "MERGE_SUBQUERY"."UPDATE_FLAG")
  ;
    COMMIT;
  EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    COMMIT;
    RETURN FALSE;
  END;
  COMMIT;
  RETURN TRUE;
END "STAGE_CLIENT_STAGE_1_Bat";

FUNCTION Main RETURN NUMBER IS
get_batch_status           BOOLEAN := TRUE;
BEGIN
  




  
PROCEDURE EXEC_AUTONOMOUS_SQL(CMD IN VARCHAR2) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE (CMD);
  COMMIT;
END;
  -- Initialize all batch status variables
	"STAGE_CLIENT_STAGE_1_St" := FALSE;



			
"STAGE_CLIENT_STAGE_1_St" := "STAGE_CLIENT_STAGE_1_Bat"; 


RETURN get_status;
END Main;
END ""MAP_STAGE_CLIENT_PKG"";

/
